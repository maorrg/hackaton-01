// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String                       @id @default(auto()) @map("_id") @db.ObjectId
  name              String?                      @default("")
  lastname          String?                      @default("")
  email             String                       @unique
  password          String?
  role              Role                         @default(GUEST)
  accounts          Account[]
  sessions          Session[]
  courseAndFeedback TeacherAndCourseOnFeedback[]
  feedbackIDs       String[]                     @db.ObjectId
  feedback          Feedback[]                   @relation(fields: [feedbackIDs], references: [id])
}

model Course {
  id                 String                       @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  teacherAndFeedback TeacherAndCourseOnFeedback[]
}

model TeacherAndCourseOnFeedback {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  teacher    User     @relation(fields: [teacherId], references: [id])
  teacherId  String   @db.ObjectId
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String   @db.ObjectId
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String   @db.ObjectId

  @@unique([teacherId, courseId, feedbackId])
}

model Feedback {
  id               String                       @id @default(auto()) @map("_id") @db.ObjectId
  teacherAndCourse TeacherAndCourseOnFeedback[]
  userIDs          String[]                     @db.ObjectId
  students         User[]                       @relation(fields: [userIDs], references: [id])
  createdAt        DateTime                     @default(now())
}

enum Role {
  TEACHER
  STUDENT
  GUEST
}

enum Status {
  ACTIVE
  INACTIVE
}
