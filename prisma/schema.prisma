// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String                  @unique
  emailVerified          DateTime?
  image                  String?
  role                   Role                    @default(STUDENT)
  accounts               Account[]
  sessions               Session[]
  feedbacks              Feedback[]
  sections               Section[]
  userSecurityValidation UserSecurityValidation?
  teacher                Teacher?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Teacher {
  id                          Int                           @id @default(autoincrement())
  name                        String
  lastname                    String
  sections                    Section[]
  TeacherAndSectionOnFeedback TeacherAndSectionOnFeedback[]
  user                        User?                         @relation(fields: [userId], references: [id])
  userId                      String?                       @unique
}

model Course {
  id       Int       @id @default(autoincrement())
  name     String
  sections Section[]
}

model Section {
  id                          Int                           @id @default(autoincrement())
  code                        String                        @unique
  teachers                    Teacher[]
  course                      Course                        @relation(fields: [courseId], references: [id])
  courseId                    Int
  teacherAndSectionOnFeedback TeacherAndSectionOnFeedback[]
  users                       User[]
}

model TeacherAndSectionOnFeedback {
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  teacherId  Int
  section    Section  @relation(fields: [sectionId], references: [id])
  sectionId  Int
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  feedbackId Int      @unique

  @@id([teacherId, sectionId, feedbackId])
}

model Feedback {
  id                          Int                          @id @default(autoincrement())
  rating                      Float
  comment                     String
  suggestion                  String
  user                        User                         @relation(fields: [userEmail], references: [email])
  userEmail                   String
  createdAt                   DateTime                     @default(now())
  teacherAndSectionOnFeedback TeacherAndSectionOnFeedback?
}

model SecurityQuestion {
  id                     Int                      @id @default(autoincrement())
  title                  String
  question               String
  userSecurityValidation UserSecurityValidation[]
}

model UserSecurityValidation {
  id                 Int               @id @default(autoincrement())
  answer             String
  securityQuestion   SecurityQuestion? @relation(fields: [securityQuestionId], references: [id], onDelete: Cascade)
  securityQuestionId Int
  user               User?             @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail          String            @unique
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}
